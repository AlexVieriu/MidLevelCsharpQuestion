02.1. It is possible to have a Tuple with more then eight elements?
03.1. What is the difference between regular cast and casting with "as" keyword?
03.2. Why can we only use the "as" keyword to cast objects to nullable types?
04.1. What are the global using directives?
05.1. What is the difference between strongly-typed and weakly-typed programming languages?
05.2. What is the difference between static-typed and dynamic-typed programming languages?
06.1. What is an expression?
06.2. What is a statement?
07.1. What is the signature of a function that can be assigned to a variable of a type Func<int, int, bool>?
07.2. What is an Action?
08.1. What is the difference between a Func and a delegate?
08.2. What is a multicast delegate?
09.1. What is the mark-and-sweep algorithm?
09.2. How many stacks are there in a running .NET application?
09.3. What 2 main algorithms of identifying used and unused objects are implemented by tools similar to .NET Garbage Collector?
10.1. What is the Large Objects Heap(LOH)?
10.2. What does it mean that the object is pinned?	
11.1. What is the difference between a destructor, a finalizer, and the Finalize method?
11.2. Does the Garbage Collector call the Dispose method?
11.3. When should we right our own Destructors?
11.4. What are managed and unmanaged resources?
12.1. What could be the reason to use default implementations in interfaces?
13.1. What is the difference between the destructor and the Deconstruct method?
13.2. How can we define deconstruction for types that we did not create and we don't have access to their source code?
14.1. What are the acceptable cases of catching any type of exception?
14.2. What is the global catch block?
15.1. What is the stack trace?
15.2. Should we use "throw" or "throw ex" and why?
16.1. What is the purpose of the GetType method?
16.2. Where is the GetType method defined?
17.1. What are the downside of using reflection?
18.1. What is metadata?
18.2. How to define a custom attribute?
19.1. What is the uses of Serialization?
19.2. What does the Serializable attribute do?
19.3. What is deserialization?
20.1. How can we check if an object is of a given type, and cast to it this type in the same statement?
21.1. What is the decimal representation of number 101?
21.2. Why arithmetic operations in programming can give unexpected results, 
like for example adding 2 large integers can give a negative number?
22.1. What is the purpose of the "unchecked" keyword?
22.2. What is a silent failure?
22.3. What is the BigInteger type?
23.1. What is the difference between double and float?
23.2. What is the NaN?
23.3. What numeric type should be use to represent money?
24.1. What is a jagged array?
24.2. What are the advantages of using arrays? 
24.3. What are the disadvantages of using arrays?
24.4. How to resize an array?
25.1. Why is it a good idea to set the Capacity of the List in the constructor 
25.2. What is the complexity of the .Insert method of a List class?
26.1. What is the difference between an array, a List and an ArrayList?
26.2. What to use ArrayList over List<T>?
27.1. Can two objects of the same type, different by value, have the same hash codes?
27.2. Why is it a good idea to provide a custom implementation of the GetHashCode method for structs?
28.1. What is a hashtable?
28.2. Will the Dictionary works correctly if we have hash code conflict for two of its key?
28.3. Why should we override the Equals method when we override the GetHashCode method?
29.1. It is possible to have a class with an indexer accepting a string as a parameter?
29.2. Can we have more than one indexer defined in a class?
30.1. What are the benefits of using cashing?
30.2. What are the downside of using caching?
31.1. What are pure functions?
31.2. What are the benefits of using immutable types?(5 examples)
31.3. What is the non-destructive mutation?
32.1. What is the purpose of the "with" keyword?
32.2. What are positional records?
33.1. What is interning of strings?
33.2. What is the size of the stack in megabits?
33.3. What is the underling data structure for string?
34.1. What does it mean that the strings are immutable?
35.1. What is the purpose of the operator keyword?
35.2. What is the difference between explicit and implicit conversion?
36.1. Can we modify the value of an anonymous type property?
36.2. When should/shouldn't use anonymous types?
36.3. Are anonymous types value or reference types?
37.1. Is following the Single Responsibility Principle and keep high cohesion the same thing?
38.1. How you can detect a strongly couple type classes?
38.2. Which of the SOLID principles allow us to reduce coupling?
39.1. What are the benefits of using the Strategy Design Pattern?